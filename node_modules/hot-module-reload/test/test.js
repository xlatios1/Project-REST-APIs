var fs = require('fs');
var path = require('path');
var assert = require('assert');
var HotReload = require('../index');


describe('Hot Reload', function() {

  it("should reload when required module changed", function() {
    var tag = 1;
    setup(tag, 42);
    var data = undefined;
    HotReload(function() {
      data = require('./data1');
    });
    return run(function() {
      assert.equal(data, 42);
      setup(tag, 321);
    })
    .then(wait(500))
    .then(function() {
      assert.equal(data, 321);
    })
    .then(cleanup(tag))
    .catch(cleanup(tag));
  });

  it("should not crash when required module doesn't compile", function() {
    var tag = 2;
    setup(tag, 123);
    var data = undefined;
    HotReload(function() {
      data = require('./data2');
    });
    return run(function() {
      assert.equal(data, 123);
      setup(tag, '::');
    })
    .then(wait(500))
    .then(function() {
      assert.equal(data, 123);
    })
    .then(cleanup(tag))
    .catch(cleanup(tag));
  });
});


function setup(num, value) {
  var file = './data' + num + '.js';
  var exp = 'module.exports = ' + (value || num) + ';';
  fs.writeFileSync(path.resolve(__dirname, file), exp);
  return file;
}

function cleanup(num) {
  return function(error) {
    var file = './data' + num + '.js';
    fs.unlinkSync(path.resolve(__dirname, file));
    if (error) throw error;
  }
}


function run(fn) {
  return new Promise(function(resolve) {
    resolve(fn());
  });
}

function wait(time) {
  return function() {
    return new Promise(function(resolve) {
      setTimeout(resolve, time);
    });
  };
}
